package main;

import java.awt.Rectangle;

import entity.Entity;

public class CollisionChecker {

    GamePanel gp;

    public CollisionChecker(GamePanel gp) {
        this.gp = gp;
    }

    public void checkTile(Entity entity) {
        int entityLeftWorldX = entity.worldX + entity.solidArea.x;
        int entityRightWorldX = entity.worldX + entity.solidArea.x + entity.solidArea.width;
        int entityTopWorldY = entity.worldY + entity.solidArea.y;
        int entityBottomWorldY = entity.worldY + entity.solidArea.y + entity.solidArea.height;

        int entityLeftCol = entityLeftWorldX / gp.tileSize;
        int entityRightCol = entityRightWorldX / gp.tileSize;
        int entityTopRow = entityTopWorldY / gp.tileSize;
        int entityBottomRow = entityBottomWorldY / gp.tileSize;

        int tileNum1, tileNum2;

        switch (entity.direction) {
            case "up":
                entityTopRow = (int) ((entity.worldY - entity.speed) / gp.tileSize);
                tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityTopRow];
                tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityTopRow];
                checkCollision(entity, tileNum1, tileNum2);
                break;
            case "down":
                entityBottomRow = (int) ((entity.worldY + entity.speed + gp.tileSize - 1) / gp.tileSize);
                tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityBottomRow];
                tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityBottomRow];
                checkCollision(entity, tileNum1, tileNum2);
                break;
            case "left":
                entityLeftCol = (int) ((entity.worldX - entity.speed) / gp.tileSize);
                tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityTopRow];
                tileNum2 = gp.tileM.mapTileNum[entityLeftCol][entityBottomRow];
                checkCollision(entity, tileNum1, tileNum2);
                break;
            case "right":
                entityRightCol = (int) ((entity.worldX + entity.speed + gp.tileSize - 1) / gp.tileSize);
                tileNum1 = gp.tileM.mapTileNum[entityRightCol][entityTopRow];
                tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityBottomRow];
                checkCollision(entity, tileNum1, tileNum2);
                break;
        }
    }

    private void checkCollision(Entity entity, int tileNum1, int tileNum2) {
        if (gp.tileM.tile[tileNum1].collision || gp.tileM.tile[tileNum2].collision) {
            entity.collisionOn = true;
        }
    }

    public int checkObject(Entity entity, boolean player) {
        int index = 999;

        for (int i = 0; i < gp.obj.length; i++) {
            if (gp.obj[i] != null) {
                Rectangle entitySolidArea = new Rectangle(entity.worldX + entity.solidArea.x,
                                                          entity.worldY + entity.solidArea.y,
                                                          entity.solidArea.width,
                                                          entity.solidArea.height);

                Rectangle objSolidArea = new Rectangle(gp.obj[i].worldX + gp.obj[i].solidArea.x,
                                                       gp.obj[i].worldY + gp.obj[i].solidArea.y,
                                                       gp.obj[i].solidArea.width,
                                                       gp.obj[i].solidArea.height);

                switch (entity.direction) {
                    case "up":
                        entitySolidArea.y -= entity.speed;
                        break;
                    case "down":
                        entitySolidArea.y += entity.speed;
                        break;
                    case "left":
                        entitySolidArea.x -= entity.speed;
                        break;
                    case "right":
                        entitySolidArea.x += entity.speed;
                        break;
                }

                if (entitySolidArea.intersects(objSolidArea)) {
                    if (gp.obj[i].collision && player) {
                        entity.collisionOn = true;
                        index = 1;
                    }
                }
            }
        }

        return index;
    }

}