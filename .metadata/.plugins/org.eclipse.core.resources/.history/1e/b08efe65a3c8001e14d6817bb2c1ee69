package main;

import entity.Entity;
import object.OBJ_Door;

public class CollisionChecker {

    GamePanel gp;

    public CollisionChecker(GamePanel gp) {
        this.gp = gp;
    }

    public void checkCollision(Entity entity) {
        checkTile(entity);
        checkObject(entity, true);
    }

    private void checkTile(Entity entity) {
        int entityLeftWorldX = entity.worldX + entity.solidArea.x;
        int entityRightWorldX = entity.worldX + entity.solidArea.x + entity.solidArea.width;
        int entityTopWorldY = entity.worldY + entity.solidArea.y;
        int entityBottomWorldY = entity.worldY + entity.solidArea.y + entity.solidArea.height;

        int entityLeftCol = entityLeftWorldX / gp.tileSize;
        int entityRightCol = entityRightWorldX / gp.tileSize;
        int entityTopRow = entityTopWorldY / gp.tileSize;
        int entityBottomRow = entityBottomWorldY / gp.tileSize;

        int tileNum1, tileNum2;

        // Verificar que las coordenadas estén dentro de los límites del array
        if (entityLeftCol >= 0 && entityRightCol < gp.maxWorldCol && entityTopRow >= 0 && entityBottomRow < gp.maxWorldRow) {
            switch (entity.direction) {
                case "up":
                    entityTopRow = (int) ((entity.worldY - entity.speed) / gp.tileSize);
                    tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityTopRow];
                    tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityTopRow];
                    checkTileCollision(entity, tileNum1, tileNum2);
                    break;
                case "down":
                    entityBottomRow = (int) ((entity.worldY + entity.speed + gp.tileSize - 1) / gp.tileSize);
                    tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityBottomRow];
                    tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityBottomRow];
                    checkTileCollision(entity, tileNum1, tileNum2);
                    break;
                case "left":
                    entityLeftCol = (int) ((entity.worldX - entity.speed) / gp.tileSize);
                    tileNum1 = gp.tileM.mapTileNum[entityLeftCol][entityTopRow];
                    tileNum2 = gp.tileM.mapTileNum[entityLeftCol][entityBottomRow];
                    checkTileCollision(entity, tileNum1, tileNum2);
                    break;
                case "right":
                    entityRightCol = (int) ((entity.worldX + entity.speed + gp.tileSize - 1) / gp.tileSize);
                    tileNum1 = gp.tileM.mapTileNum[entityRightCol][entityTopRow];
                    tileNum2 = gp.tileM.mapTileNum[entityRightCol][entityBottomRow];
                    checkTileCollision(entity, tileNum1, tileNum2);
                    break;
            }
        }
    }

    private void checkTileCollision(Entity entity, int tileNum1, int tileNum2) {
        if (gp.tileM.tile[tileNum1].collision || gp.tileM.tile[tileNum2].collision) {
            entity.collisionOn = true;
        }
    }

    private void checkObject(Entity entity, boolean player) {
        int index = 999;

        for (int i = 0; i < gp.obj.length; i++) {
            if (gp.obj[i] != null) {
                entity.solidArea.x = entity.worldX + entity.solidArea.x;
                entity.solidArea.y = entity.worldY + entity.solidArea.y;

                gp.obj[i].solidArea.x = gp.obj[i].worldX + gp.obj[i].solidArea.x;
                gp.obj[i].solidArea.y = gp.obj[i].worldY + gp.obj[i].solidArea.y;

                // Verificar si hay colisión entre el jugador y el objeto
                if (entity.solidArea.intersects(gp.obj[i].solidArea)) {
                    if (player) {
                        // Verificación específica para la puerta
                        if (gp.obj[i] instanceof OBJ_Door) {
                            OBJ_Door door = (OBJ_Door) gp.obj[i];
                            if (door.collision && gp.player.hasKey > 0) {
                                // Si la puerta es sólida y el jugador tiene la llave, usar la llave
                                door.useKey(gp, gp.player);
                            }
                        }
                        // Si es el jugador y el objeto es la llave, se actualiza el índice
                        if ("Key".equals(gp.obj[i].name)) {
                            index = i;
                        }
                    }
                }

                entity.solidArea.x = entity.solidAreaDefaultX;
                entity.solidArea.y = entity.solidAreaDefaultY;
                gp.obj[i].solidArea.x = gp.obj[i].solidAreaDefaultX;
                gp.obj[i].solidArea.y = gp.obj[i].solidAreaDefaultY;
            }
        }

        // Puedes hacer algo con el índice si es necesario
        // Por ejemplo, eliminar el objeto del array de objetos
    }
}