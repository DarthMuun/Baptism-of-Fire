package entity;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import main.GamePanel;
import main.KeyHandler;

public class Player extends Entity {

    private final GamePanel gp;
    private final KeyHandler keyH;

    private final int screenX;
    private final int screenY;
    private int hasKey = 0;

    public Player(GamePanel gp, KeyHandler keyH) {
        this.gp = gp;
        this.keyH = keyH;

        screenX = gp.screenWidth / 2 - (gp.tileSize / 2);
        screenY = gp.screenHeight / 2 - (gp.tileSize / 2);

        solidArea = new Rectangle(16, 16, 32, 32); // Initialize Rectangle directly
        solidAreaDefaultX = solidArea.x;
        solidAreaDefaultY = solidArea.y;

        setDefaultValues();
        getPlayerImage();
    }

    private void setDefaultValues() {
        worldX = gp.tileSize * 31;
        worldY = gp.tileSize * 45;
        speed = 5;
        direction = "down";
    }

    private void getPlayerImage() {
        try {
            up1 = loadImage("/player/boy_up_1.png");
            up2 = loadImage("/player/boy_up_2.png");
            down1 = loadImage("/player/boy_down_1.png");
            down2 = loadImage("/player/boy_down_2.png");
            left1 = loadImage("/player/boy_left_1.png");
            left2 = loadImage("/player/boy_left_2.png");
            left3 = loadImage("/player/boy_left_3.png");
            right1 = loadImage("/player/boy_right_1.png");
            right2 = loadImage("/player/boy_right_2.png");
            right3 = loadImage("/player/boy_right_3.png");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private BufferedImage loadImage(String path) throws IOException {
        return ImageIO.read(getClass().getResourceAsStream(path));
    }

    public void update() {
        if (keyH.upPressed || keyH.downPressed || keyH.leftPressed || keyH.rightPressed) {
            setDirection();
            checkTileCollision();
            int objIndex = gp.cChecker.checkObject(this, true);
            pickUpObject(objIndex);

            if (!collisionOn) {
                movePlayer();
            }

            updateSpriteCounter();
        }
    }

    private void setDirection() {
        if (keyH.upPressed) {
            direction = "up";
        } else if (keyH.downPressed) {
            direction = "down";
        } else if (keyH.leftPressed) {
            direction = "left";
        } else if (keyH.rightPressed) {
            direction = "right";
        }
    }

    private void checkTileCollision() {
        collisionOn = false;
        gp.cChecker.checkTile(this);
    }

    private void movePlayer() {
        switch (direction) {
            case "up":
                worldY -= speed;
                break;
            case "down":
                worldY += speed;
                break;
            case "left":
                worldX -= speed;
                break;
            case "right":
                worldX += speed;
                break;
        }
    }

    private void updateSpriteCounter() {
        spriteCounter++;
        if (spriteCounter > 12) {
            spriteCounter = 0;
            spriteNum = (spriteNum == 1) ? 2 : 1;
        }
    }

    public void pickUpObject(int i) {
        if (i != 999 && gp.obj[i] != null) {
            String objectName = gp.obj[i].name;

            switch (objectName) {
                case "Key":
                    hasKey++;
                    gp.obj[i] = null;
                    System.out.println("Key:" + hasKey);
                    break;
                case "Door":
                    if (hasKey > 0) {
                        gp.obj[i] = null;
                        hasKey--;
                    }
                    System.out.println("Key:" + hasKey);
                    break;
            }
        }
    }

    public void draw(Graphics2D g2) {
        BufferedImage image = getImageForDirection();
        g2.drawImage(image, screenX, screenY, gp.tileSize, gp.tileSize, null);
    }

    private BufferedImage getImageForDirection() {
        BufferedImage image = null;

        switch (direction) {
            case "up":
                image = (spriteNum == 1) ? up1 : up2;
                break;
            case "down":
                image = (spriteNum == 1) ? down1 : down2;
                break;
            case "left":
                image = (spriteNum == 1) ? left1 : left2;
                break;
            case "right":
                image = (spriteNum == 1) ? right1 : ((spriteNum == 2) ? right2 : right3);
                break;
        }
        return image;
    }
}
