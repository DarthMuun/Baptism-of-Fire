package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

import entity.Player;
import tile.TileManager;

public class GamePanel extends JPanel implements Runnable {

    // Screen Settings

    final int originalTileSize = 128; // Cambié el tamaño original a 128

    public final int tileSize = originalTileSize;
    public final int maxScreenCol = 1280; // Cantidad de columnas en pantalla
    public final int maxScreenRow = 720; // Cantidad de filas en pantalla
    public final int screenWidth = maxScreenCol;
    public final int screenHeight = maxScreenRow;

    // Tamaño del fondo
    //public final int backgroundWidth = 1280;
    //public final int backgroundHeight = 720;

    int FPS = 60;

    TileManager tileM = new TileManager(this);
    KeyHandler keyH = new KeyHandler();
    Thread gameThread;
    Player player = new Player(this, keyH);

    public GamePanel() {

        this.setPreferredSize(new Dimension(screenWidth, screenHeight));
        this.setBackground(Color.black);
        this.setDoubleBuffered(true);
        this.addKeyListener(keyH);
        this.setFocusable(true);

    }

    public void startGameThread() {

        gameThread = new Thread(this);
        gameThread.start();

    }

    @Override
    public void run() {

        double drawInterval = 1000000000 / FPS;
        double nextDrawTime = System.nanoTime() + drawInterval;

        while (gameThread != null) {

            update();

            repaint();

            try {

                double remainingTime = nextDrawTime - System.nanoTime();
                remainingTime = remainingTime / 1000000;

                if (remainingTime < 0) {
                    remainingTime = 0;
                }

                Thread.sleep((long) remainingTime);

                nextDrawTime += drawInterval;

            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        }

    }

    public void update() {

        player.update();

    }

    @Override
    protected void paintComponent(Graphics g) {

        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g;

        // Dibuja el fondo (ajusta según tus necesidades)
        g2.setColor(Color.BLUE);  // Cambia el color del fondo según tus preferencias
        g2.fillRect(0, 0, backgroundWidth, backgroundHeight);

        tileM.draw(g2);

        player.draw(g2);

        g2.dispose();

    }
}